{"version":3,"sources":["../../src/ngx-file-drop/ngx-file-drop-entry.ts","../../src/ngx-file-drop/ngx-templates.directive.ts","../../src/ngx-file-drop/ngx-file-drop.component.ts","../../src/ngx-file-drop/ngx-file-drop.module.ts"],"names":["relativePath","fileEntry","this","template","Directive","args","selector","TemplateRef","NgxFileDropComponent","zone","renderer","_this","accept","directory","multiple","dropZoneLabel","dropZoneClassName","useDragEnter","contentClassName","showBrowseBtn","browseBtnClassName","browseBtnLabel","onFileDrop","EventEmitter","onFileOver","onFileLeave","isDraggingOverDropZone","globalDraggingInProgress","files","numOfActiveReadEntries","helperFormEl","fileInputPlaceholderEl","dropEventTimerSubscription","_disabled","openFileSelector","event","fileSelector","nativeElement","click","globalDragStartListener","listen","evt","globalDragEndListener","Object","defineProperty","prototype","value","ngOnDestroy","unsubscribe","onDragOver","preventAndStop","isDropzoneDisabled","emit","onDragEnter","onDragLeave","dropFiles","dataTransfer","dropEffect","items","checkFiles","uploadFiles","target","resetFileInput","i","item","entry","this_1","canGetAsEntry","webkitGetAsEntry","isFile","toUpload","NgxFileDropEntry","name","addToQueue","isDirectory","traverseFileTree","fakeFileEntry","file","callback","length","timer","subscribe","path","push","dirReader_1","createReader","entries_1","readEntries_1","readEntries","result","concat","toUpload_1","run","fileInputEl","fileInputContainerEl","parentElement","getHelperFormElement","getFileInputPlaceholderElement","insertBefore","appendChild","reset","removeChild","createElement","disabled","stopPropagation","preventDefault","Component","NgZone","Renderer2","Input","Output","ContentChild","NgxFileDropContentTemplateDirective","read","ViewChild","static","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap"],"mappings":"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","sourcesContent":["import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\n\n/**\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\n * properties of the given {@link FileSystemEntry}.\n */\nexport class NgxFileDropEntry {\n    constructor(\n        public relativePath: string,\n        public fileEntry: FileSystemEntry\n    ) {\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-file-drop-content-tmp]' })\nexport class NgxFileDropContentTemplateDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n","import {\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\n\nimport { NgxFileDropEntry } from './ngx-file-drop-entry';\nimport { FileSystemDirectoryEntry, FileSystemEntry, FileSystemFileEntry } from './dom.types';\nimport { NgxFileDropContentTemplateDirective } from './ngx-templates.directive';\n\n@Component({\n  selector: 'ngx-file-drop',\n  templateUrl: './ngx-file-drop.component.html',\n  styleUrls: ['./ngx-file-drop.component.scss'],\n})\nexport class NgxFileDropComponent implements OnDestroy {\n\n  @Input()\n  public accept: string = '*';\n\n  @Input()\n  public directory: boolean = false;\n\n  @Input()\n  public multiple: boolean = true;\n\n  @Input()\n  public dropZoneLabel: string = '';\n\n  @Input()\n  public dropZoneClassName: string = 'ngx-file-drop__drop-zone';\n\n  @Input()\n  public useDragEnter: boolean = false;\n\n  @Input()\n  public contentClassName: string = 'ngx-file-drop__content';\n\n  @Input()\n  public showBrowseBtn: boolean = false;\n\n  @Input()\n  public browseBtnClassName: string = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\n\n  @Input()\n  public browseBtnLabel: string = 'Browse files';\n\n  @Output()\n  public onFileDrop: EventEmitter<NgxFileDropEntry[]> = new EventEmitter();\n\n  @Output()\n  public onFileOver: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  public onFileLeave: EventEmitter<any> = new EventEmitter();\n\n  // custom templates\n  @ContentChild(NgxFileDropContentTemplateDirective, { read: TemplateRef }) contentTemplate: TemplateRef<any>;\n\n  @ViewChild('fileSelector', { static: true })\n  public fileSelector: ElementRef;\n\n  public isDraggingOverDropZone: boolean = false;\n\n  private globalDraggingInProgress: boolean = false;\n  private readonly globalDragStartListener: () => void;\n  private readonly globalDragEndListener: () => void;\n\n  private files: NgxFileDropEntry[] = [];\n  private numOfActiveReadEntries: number = 0;\n\n  private helperFormEl: HTMLFormElement | null = null;\n  private fileInputPlaceholderEl: HTMLDivElement | null = null;\n\n  private dropEventTimerSubscription: Subscription | null = null;\n\n  private _disabled: boolean = false;\n\n  public get disabled(): boolean { return this._disabled; }\n\n  @Input()\n  public set disabled(value: boolean) {\n    this._disabled = (value != null && `${value}` !== 'false');\n  }\n\n  constructor(\n    private zone: NgZone,\n    private renderer: Renderer2\n  ) {\n    this.globalDragStartListener = this.renderer.listen('document', 'dragstart', (evt: Event) => {\n      this.globalDraggingInProgress = true;\n    });\n    this.globalDragEndListener = this.renderer.listen('document', 'dragend', (evt: Event) => {\n      this.globalDraggingInProgress = false;\n    });\n  }\n\n  public ngOnDestroy(): void {\n    if (this.dropEventTimerSubscription) {\n      this.dropEventTimerSubscription.unsubscribe();\n      this.dropEventTimerSubscription = null;\n    }\n    this.globalDragStartListener();\n    this.globalDragEndListener();\n    this.files = [];\n    this.helperFormEl = null;\n    this.fileInputPlaceholderEl = null;\n  }\n\n  public onDragOver(event: Event): void {\n    if (this.useDragEnter) {\n      this.preventAndStop(event);\n    } else if (!this.isDropzoneDisabled() && !this.useDragEnter) {\n      if (!this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = true;\n        this.onFileOver.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n\n  public onDragEnter(event: Event): void {\n    if (!this.isDropzoneDisabled() && this.useDragEnter) {\n      if (!this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = true;\n        this.onFileOver.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n\n  public onDragLeave(event: Event): void {\n    if (!this.isDropzoneDisabled()) {\n      if (this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = false;\n        this.onFileLeave.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n\n  public dropFiles(event: DragEvent): void {\n    if (!this.isDropzoneDisabled()) {\n      this.isDraggingOverDropZone = false;\n      if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'copy';\n        let items: FileList | DataTransferItemList;\n        if (event.dataTransfer.items) {\n          items = event.dataTransfer.items;\n        } else {\n          items = event.dataTransfer.files;\n        }\n        this.preventAndStop(event);\n        this.checkFiles(items);\n      }\n    }\n  }\n\n  public openFileSelector = (event?: MouseEvent): void => {\n    if (this.fileSelector && this.fileSelector.nativeElement) {\n      (this.fileSelector.nativeElement as HTMLInputElement).click();\n    }\n  };\n\n  /**\n   * Processes the change event of the file input and adds the given files.\n   * @param Event event\n   */\n  public uploadFiles(event: Event): void {\n    if (!this.isDropzoneDisabled()) {\n      if (event.target) {\n        const items = (event.target as HTMLInputElement).files || ([] as any);\n        this.checkFiles(items);\n        this.resetFileInput();\n      }\n    }\n  }\n\n  private checkFiles(items: FileList | DataTransferItemList): void {\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      let entry: FileSystemEntry | null = null;\n      if (this.canGetAsEntry(item)) {\n        entry = item.webkitGetAsEntry();\n      }\n\n      if (!entry) {\n        if (item) {\n          const fakeFileEntry: FileSystemFileEntry = {\n            name: (item as File).name,\n            isDirectory: false,\n            isFile: true,\n            file: (callback: (filea: File) => void): void => {\n              callback(item as File);\n            },\n          };\n          const toUpload: NgxFileDropEntry = new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\n          this.addToQueue(toUpload);\n        }\n\n      } else {\n        if (entry.isFile) {\n          const toUpload: NgxFileDropEntry = new NgxFileDropEntry(entry.name, entry);\n          this.addToQueue(toUpload);\n\n        } else if (entry.isDirectory) {\n          this.traverseFileTree(entry, entry.name);\n        }\n      }\n    }\n\n    if (this.dropEventTimerSubscription) {\n      this.dropEventTimerSubscription.unsubscribe();\n    }\n    this.dropEventTimerSubscription = timer(200, 200)\n      .subscribe(() => {\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\n          const files = this.files;\n          this.files = [];\n          this.onFileDrop.emit(files);\n        }\n      });\n  }\n\n  private traverseFileTree(item: FileSystemEntry, path: string): void {\n    if (item.isFile) {\n      const toUpload: NgxFileDropEntry = new NgxFileDropEntry(path, item);\n      this.files.push(toUpload);\n\n    } else {\n      path = path + '/';\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\n      let entries: FileSystemEntry[] = [];\n\n      const readEntries = () => {\n        this.numOfActiveReadEntries++;\n        dirReader.readEntries((result) => {\n          if (!result.length) {\n            // add empty folders\n            if (entries.length === 0) {\n              const toUpload: NgxFileDropEntry = new NgxFileDropEntry(path, item);\n              this.zone.run(() => {\n                this.addToQueue(toUpload);\n              });\n\n            } else {\n              for (let i = 0; i < entries.length; i++) {\n                this.zone.run(() => {\n                  this.traverseFileTree(entries[i], path + entries[i].name);\n                });\n              }\n            }\n\n          } else {\n            // continue with the reading\n            entries = entries.concat(result);\n            readEntries();\n          }\n\n          this.numOfActiveReadEntries--;\n        });\n      };\n\n      readEntries();\n    }\n  }\n\n  /**\n   * Clears any added files from the file input element so the same file can subsequently be added multiple times.\n   */\n  private resetFileInput(): void {\n    if (this.fileSelector && this.fileSelector.nativeElement) {\n      const fileInputEl = this.fileSelector.nativeElement as HTMLInputElement;\n      const fileInputContainerEl = fileInputEl.parentElement;\n      const helperFormEl = this.getHelperFormElement();\n      const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();\n\n      // Just a quick check so we do not mess up the DOM (will never happen though).\n      if (fileInputContainerEl !== helperFormEl) {\n        // Insert the form input placeholder in the DOM before the form input element.\n        this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);\n        // Add the form input as child of the temporary form element, removing the form input from the DOM.\n        this.renderer.appendChild(helperFormEl, fileInputEl);\n        // Reset the form, thus clearing the input element of any files.\n        helperFormEl.reset();\n        // Add the file input back to the DOM in place of the file input placeholder element.\n        this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);\n        // Remove the input placeholder from the DOM\n        this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\n      }\n    }\n  }\n\n  /**\n   * Get a cached HTML form element as a helper element to clear the file input element.\n   */\n  private getHelperFormElement(): HTMLFormElement {\n    if (!this.helperFormEl) {\n      this.helperFormEl = this.renderer.createElement('form') as HTMLFormElement;\n    }\n\n    return this.helperFormEl;\n  }\n\n  /**\n   * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\n   */\n  private getFileInputPlaceholderElement(): HTMLDivElement {\n    if (!this.fileInputPlaceholderEl) {\n      this.fileInputPlaceholderEl = this.renderer.createElement('div') as HTMLDivElement;\n    }\n\n    return this.fileInputPlaceholderEl;\n  }\n\n  private canGetAsEntry(item: any): item is DataTransferItem {\n    return !!item.webkitGetAsEntry;\n  }\n\n  private isDropzoneDisabled(): boolean {\n    return (this.globalDraggingInProgress || this.disabled);\n  }\n\n  private addToQueue(item: NgxFileDropEntry): void {\n    this.files.push(item);\n  }\n\n  private preventAndStop(event: Event): void {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxFileDropComponent } from './ngx-file-drop.component';\nimport { NgxFileDropContentTemplateDirective } from './ngx-templates.directive';\n\n@NgModule({\n  declarations: [\n    NgxFileDropComponent,\n    NgxFileDropContentTemplateDirective,\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    NgxFileDropComponent,\n    NgxFileDropContentTemplateDirective,\n  ],\n  providers: [],\n  bootstrap: [\n    NgxFileDropComponent\n  ],\n})\nexport class NgxFileDropModule {}\n"]}